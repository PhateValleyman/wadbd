let MODULE_PATH = "/data/adb/modules/umbrella-wadbd",
    callbackCounter = 0,
    themes = ["light", "dark", "amoled"],
    currentThemeIndex = localStorage.getItem("themeIndex") ? parseInt(localStorage.getItem("themeIndex")) : 0,
    isEnvironmentSupported = true,
    showNotifications = localStorage.getItem("showNotifications") === "true";

// Načte verzi WADBD a zobrazí ji v UI
async function fetchWADBDVersion() {
    let versionElement = document.getElementById("wadbdVersion");
    if (!versionElement) return;

    try {
        let command = "cat /data/adb/modules/umbrella-wadbd/module.prop | grep version= | sed s/version=//g";
        let result = await exec(command);
        versionElement.textContent = result.stdout.trim();
    } catch (error) {
        console.error("Chyba při načítání verze:", error);
        versionElement.textContent = "Chyba načtení verze";
    }
}

// Přepíná USB ladění na zařízení
async function toggleUsbDebug(isEnabled) {
    if (!isEnvironmentSupported) return;
    
    try {
        await exec(`settings put global adb_enabled ${isEnabled ? "1" : "0"}`);
        updateStatus();
    } catch (error) {
        console.error("Chyba při přepínání USB ladění:", error);
    }
}

// Aktualizuje stav ADB a zobrazuje jej v UI
async function updateStatus() {
    let statusElement = document.getElementById("statusOutput");
    if (!isEnvironmentSupported) {
        statusElement.innerHTML = `
            <div class="error-message">
                KernelSU API není dostupné. Nepodporované prostředí.
            </div>
        `;
        return;
    }

    try {
        let [adbEnabled, adbPort, adbdStatus, adbdPID] = await Promise.all([
            exec("settings get global adb_enabled"),
            exec("getprop service.adb.tcp.port"),
            exec("getprop init.svc.adbd"),
            exec("pidof adbd")
        ]);

        let isWirelessEnabled = adbPort.stdout.trim() !== "" && adbPort.stdout.trim() !== "-1";
        let bootPort = await getBootPort();

        // Aktualizace UI
        statusElement.innerHTML = `
            <div class="status-item">
                <span class="status-label">Ladění přes USB:</span>
                <span>${adbEnabled.stdout === "1" ? "Povoleno" : "Zakázáno"}</span>
            </div>
            <div class="status-item">
                <span class="status-label">Bezdrátové ADB:</span>
                <span>${isWirelessEnabled ? `Povoleno (Port ${adbPort.stdout})` : "Zakázáno"}</span>
            </div>
            <div class="status-item">
                <span class="status-label">ADB démon:</span>
                <span>${adbdStatus.stdout || "Neznámý"} ${adbdStatus.stdout.trim() === "running" ? `(PID: ${adbdPID.stdout.trim() || "N/A"})` : ""}</span>
            </div>
            <div class="status-item">
                <span class="status-label">Spustit při startu:</span>
                <span>${bootPort ? `Povoleno (Port ${bootPort})` : "Nepovoleno"}</span>
            </div>
        `;

        // Synchronizace checkboxů
        document.getElementById("usbDebugToggle").checked = adbEnabled.stdout === "1";
        document.getElementById("wirelessToggle").checked = isWirelessEnabled;
        document.getElementById("bootToggle").checked = !!bootPort;
    } catch (error) {
        statusElement.innerHTML = `
            <div class="error-message">
                Chyba při načítání stavu
            </div>
        `;
    }
}

// Načte informace o zařízení a zobrazí je v UI
async function updateDeviceInfo() {
    let deviceInfoElement = document.getElementById("deviceInfo");
    
    try {
        let [codename, model, androidVersion, securityPatch, kernel] = await Promise.all([
            exec("getprop ro.product.device"),
            exec("getprop ro.product.model"),
            exec("getprop ro.build.version.release"),
            exec("getprop ro.build.version.security_patch"),
            exec("uname -r")
        ]);

        deviceInfoElement.innerHTML = `
            <div class="info-item">
                <span>Kódové jméno:</span>
                <span>${codename.stdout || "Neznámé"}</span>
            </div>
            <div class="info-item">
                <span>Model:</span>
                <span>${model.stdout || "Neznámý"}</span>
            </div>
            <div class="info-item">
                <span>Verze Androidu:</span>
                <span>${androidVersion.stdout || "Neznámá"}</span>
            </div>
            <div class="info-item">
                <span>Bezpečnostní záplata:</span>
                <span>${securityPatch.stdout || "Neznámá"}</span>
            </div>
            <div class="info-item">
                <span>Verze kernelu:</span>
                <span>${kernel.stdout || "Neznámá"}</span>
            </div>
        `;
    } catch (error) {
        deviceInfoElement.innerHTML = `
            <div class="error-message">
                Chyba při načítání informací
            </div>
        `;
    }
}

// Zkopíruje zadaný text do schránky
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).catch(error => {
        console.error("Chyba kopírování:", error);
        alert("Kopírování selhalo!");
    });
}

// Inicializuje vstupní pole pro zadání portu
document.addEventListener("DOMContentLoaded", () => {
    let portInput = document.getElementById("portInput");
    portInput.addEventListener("input", () => {
        if (portInput.value.length > 5) portInput.value = portInput.value.slice(0, 5);
    });
});

// Spustí inicializaci po načtení stránky
window.onload = () => {
    setTheme(currentThemeIndex);
    initializeEnvironment();
    document.getElementById("notificationToggle").checked = showNotifications;
};

// Pravidelně aktualizuje stav a informace o připojení (každé 2 sekundy)
setInterval(() => {
    updateStatus();
    updateConnectionInfo();
}, 2000);