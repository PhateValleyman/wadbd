let MODULE_PATH = "/data/adb/modules/umbrella-wadbd",
    callbackCounter = 0,
    themes = ["light", "dark", "amoled"],
    currentThemeIndex = localStorage.getItem("themeIndex") ? parseInt(localStorage.getItem("themeIndex")) : 0,
    isEnvironmentSupported = !0,
    showNotifications = "true" === localStorage.getItem("showNotifications");

async function fetchWADBDVersion() {
    var t = document.getElementById("wadbdVersion");
    if (t) try {
        var e = (await exec("cat /data/adb/modules/umbrella-wadbd/module.prop | grep version= | sed s/version=//g")).stdout;
        t.textContent = e.trim()
    } catch (e) {
        console.error("Nepodařilo se načíst verzi WADBD:", e),
        t.textContent = "Chyba při načítání verze"
    } else console.error('Element s ID "wadbdVersion" nebyl nalezen')
}

function toggleInfoDialog() {
    var e = document.getElementById("infoDialog");
    "none" === e.style.display ? (e.style.display = "flex", fetchWADBDVersion()) : e.style.display = "none"
}

function toggleSettingsMenu() {
    var e = document.getElementById("settingsMenu");
    e.style.display = "none" === e.style.display ? "flex" : "none"
}

function openLink(e) {
    "undefined" != typeof ksu && ksu.exec ? ksu.exec(`am start -a android.intent.action.VIEW -d "${e}"`, "{}", "openLink_callback") : window.open(e, "_blank")
}

function setTheme(e) {
    var t = themes[e];
    document.body.setAttribute("data-theme", "dark" === t ? "" : t),
    localStorage.setItem("themeIndex", e)
}

function toggleTheme() {
    setTheme(currentThemeIndex = (currentThemeIndex + 1) % themes.length)
}

function getUniqueCallbackName(e) {
    return `${e}_${Date.now()}_` + callbackCounter++
}

function alert(e) {
    "undefined" != typeof ksu && ksu.toast ? ksu.toast(e) : console.log("Toast: " + e)
}

async function exec(e) {
    return new Promise((o, t) => {
        let s = getUniqueCallbackName("exec");
        window[s] = (e, t, n) => {
            o({
                errno: e,
                stdout: t.trim(),
                stderr: n
            }), delete window[s]
        };
        try {
            ksu.exec(e, "{}", s)
        } catch (e) {
            t(e), delete window[s]
        }
    })
}

async function initializeEnvironment() {
    try {
        if ("undefined" == typeof ksu && "undefined" == typeof mmrl && "undefined" == typeof $wadbd) return isEnvironmentSupported = !1, void showUnsupportedDialog();
        if ("undefined" == typeof ksu || !ksu.exec) {
            if (isEnvironmentSupported = !1, "undefined" != typeof mmrl && "undefined" != typeof $wadbd) {
                let e = document.getElementById("ksuDialog");
                e.style.display = "flex",
                document.getElementById("requestKsuApiButton").addEventListener("click", async () => {
                    try {
                        await $wadbd.requestAdvancedKernelSUAPI(),
                        alert("Požadován přístup k KernelSU API. Prosím povolte přístup."),
                        e.style.display = "none",
                        initializeEnvironment()
                    } catch (e) {
                        console.log("Chyba při žádosti o KernelSU API:", e),
                        alert("Nepodařilo se získat přístup k KernelSU API.")
                    }
                })
            }
            return
        }
        var e = (await exec("id")).errno;
        isEnvironmentSupported = 0 === e
    } catch {
        isEnvironmentSupported = !1
    }
    updateStatus(), updateDeviceInfo()
}

function showUnsupportedDialog() {
    document.getElementById("unsupportedDialog").style.display = "flex"
}

async function updateDeviceInfo() {
    var t = document.getElementById("deviceInfo");
    if (isEnvironmentSupported) try {
        var [{
            stdout: e
        }, {
            stdout: n
        }, {
            stdout: o
        }, {
            stdout: s
        }, {
            stdout: a
        }] = await Promise.all([exec("getprop ro.product.device"), exec("getprop ro.product.model"), exec("getprop ro.build.version.release"), exec("getprop ro.build.version.security_patch"), exec("uname -r")]);
        t.innerHTML = `
            <div class="info-item">
                <span class="info-label">Kódové jméno:</span>
                <span class="info-value">${e||"Neznámé"}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Název zařízení:</span>
                <span class="info-value">${n||"Neznámé"}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Verze Androidu:</span>
                <span class="info-value">${o||"Neznámé"}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Bezpečnostní záplata:</span>
                <span class="info-value">${s||"Neznámé"}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Verze kernelu:</span>
                <span class="info-value">${a||"Neznámé"}</span>
            </div>
        `
    } catch (e) {
        t.innerHTML = '<div class="error-message">Chyba při získávání informací o zařízení</div>'
    } else t.innerHTML = '<div class="error-message">KernelSU API chybí. Nepodporované prostředí.</div>'
}

async function getBootPort() {
    try {
        var e = (await exec(`cat "${MODULE_PATH}/service.sh"`)).stdout,
            t = e.match(/setprop service\.adb\.tcp\.port (\d+)/);
        return t ? t[1] : null
    } catch {
        return null
    }
}

async function updateStatus() {
    var t = document.getElementById("statusOutput");
    if (isEnvironmentSupported) try {
        var [{
            stdout: e
        }, {
            stdout: n
        }, {
            stdout: o
        }, {
            stdout: s
        }] = await Promise.all([exec("settings get global adb_enabled"), exec("getprop service.adb.tcp.port"), exec("getprop init.svc.adbd"), exec("pidof adbd")]),
            a = await checkBootStatus(),
            i = await getBootPort(),
            r = "" !== n && "-1" !== n;
        t.innerHTML = `
            <div class="status-item">
                <span class="status-label">USB ladění:</span>
                <span>${"1"===e?"Aktivováno":"Deaktivováno"}</span>
            </div>
            <div class="status-item">
                <span class="status-label">Bezdrátové ADB:</span>
                <span>${r?`Aktivováno (Port ${n})`:"Deaktivováno"}</span>
            </div>
            <div class="status-item">
                <span class="status-label">ADB démon:</span>
                <span>${o||"Neznámý"} ${"running"===o.trim()?`(PID: ${s.trim()||"N/A"})`:""}</span>
            </div>
            <div class="status-item">
                <span class="status-label">WADBD při startu:</span>
                <span>${a?`Aktivováno (Port ${i||"Neznámý"})`:"Neaktivováno"}</span>
            </div>
        `,
        document.getElementById("usbDebugToggle").checked = "1" === e,
        document.getElementById("wirelessToggle").checked = r,
        document.getElementById("bootToggle").checked = a,
        setAllControlsDisabled(!1)
    } catch (e) {
        t.innerHTML = '<div class="error-message">Chyba při načítání stavu</div>',
        setAllControlsDisabled(!0)
    } else t.innerHTML = '<div class="error-message">KernelSU API chybí. Nepodporované prostředí.</div>',
    setAllControlsDisabled(!0)
}

async function toggleUsbDebug(e) {
    if (isEnvironmentSupported) try {
        await exec("settings put global adb_enabled " + (e ? "1" : "0")),
        updateStatus()
    } catch (e) {
        console.error("Chyba při přepínání USB ladění:", e)
    }
}

async function toggleWirelessAdb(e) {
    if (isEnvironmentSupported) try {
        var t = parseInt(document.getElementById("portInput").value) || 5555;
        t < 1024 || 65535 < t ? alert("Neplatný port! Zadejte port mezi 1024 a 65535.") : (await exec("setprop service.adb.tcp.port " + (e ? t : "-1")), await exec("stop adbd"), await exec("start adbd"), e && showNotifications && await exec(`su -lp 2000 -c "cmd notification post -S bigtext -t 'WADBD' 'Tag' 'Bezdrátové ADBD povoleno na portu ${t} !!'" > /dev/null 2>&1`), updateStatus())
    } catch (e) {
        console.error("Chyba při přepínání bezdrátového ADB:", e)
    }
}

async function checkBootStatus() {
    try {
        var e, t = (await exec(`[ -f "${MODULE_PATH}/service.sh" ] && echo "1" || echo "0"`)).stdout;
        return "1" === t ? (e = (await exec(`cat "${MODULE_PATH}/service.sh"`)).stdout, e.includes("setprop service.adb.tcp.port")) : !1
    } catch {
        return !1
    }
}

async function toggleBoot(e) {
    if (isEnvironmentSupported) try {
        if (e) {
            var t = parseInt(document.getElementById("portInput").value) || 5555;
            if (t < 1024 || 65535 < t) return void alert("Neplatný port! Zadejte port mezi 1024 a 65535.");
            let e = `#!/system/bin/sh
while [ "$(getprop sys.boot_completed)" != "1" ]; do
    sleep 2
done
setprop service.adb.tcp.port ${t}
stop adbd
start adbd`;
            showNotifications && (e += `
su -lp 2000 -c "cmd notification post -S bigtext -t \\"WADBD\\" \\"Tag\\" \\"Bezdrátové ADBD povoleno na portu ${t} !!\\"" > /dev/null 2>&1`),
            await exec(`mkdir -p "${MODULE_PATH}"`),
            await exec(`echo '${e}' > "${MODULE_PATH}/service.sh"`),
            await exec(`chmod 755 "${MODULE_PATH}/service.sh"`)
        } else await exec(`rm -f "${MODULE_PATH}/service.sh"`);
        updateStatus()
    } catch (e) {
        console.error("Chyba při nastavování spouštění při startu:", e)
    }
}

function setAllControlsDisabled(t) {
    ["usbDebugToggle", "wirelessToggle", "bootToggle", "portInput", "changePortBtn"].forEach(e => {
        e = document.getElementById(e);
        e && (e.disabled = t)
    })
}

async function updateConnectionInfo() {
    var o = document.getElementById("connectionInfo");
    if (isEnvironmentSupported) try {
        let n = (await exec("getprop service.adb.tcp.port")).stdout;
        if ("" !== n && "-1" !== n) {
            var e = (await exec("ip -f inet addr show")).stdout,
                s = [...e.matchAll(/inet (\d+\.\d+\.\d+\.\d+).*(?:wlan|rmnet|eth)/g)];
            if (0 === s.length) o.innerHTML = `
                <div class="warning-message">
                    Nebyly nalezeny žádné platné síťové rozhraní. Připojte se k síti.
                </div>
            `;
            else {
                let t = `
                <div class="connection-section">
                    <div class="connection-header">Dostupné příkazy pro připojení:</div>
                    <div class="network-interfaces">`;
                s.forEach(e => {
                    e = e[1],
                    t += `
                    <div class="command-group">
                        <div class="interface-info">IP rozhraní: ${e}</div>
                        <div class="command-box">
                            <code>adb connect ${e}:${n}</code>
                            <button class="copy-button" onclick="copyToClipboard('adb connect ${e}:${n}')">Kopírovat</button>
                        </div>
                    </div>
                `
                }),
                t += `
                    </div>
                    <div class="connection-note">
                        Poznámka: Ujistěte se, že máte ADB nainstalované na počítači
                        a obě zařízení jsou ve stejné síti.
                    </div>
                </div>`,
                o.innerHTML = t
            }
        } else o.innerHTML = `
            <div class="info-message">
                Bezdrátové ADB je vypnuto. Pro zobrazení příkazů jej aktivujte.
            </div>
        `
    } catch (e) {
        o.innerHTML = '<div class="error-message">Chyba při získávání informací o připojení</div>'
    } else o.innerHTML = '<div class="error-message">KernelSU API chybí. Nepodporované prostředí.</div>'
}

function copyToClipboard(e) {
    navigator.clipboard.writeText(e).catch(e => {
        console.error("Selhalo kopírování: ", e)
    })
}

document.addEventListener("click", function(e) {
    var t = document.getElementById("settingsMenu"),
        n = document.querySelector(".settings-button");
    t.contains(e.target) || n.contains(e.target) || (t.style.display = "none")
}),

document.addEventListener("DOMContentLoaded", function() {
    var e = document.getElementById("wirelessToggle");
    let t = document.getElementById("portInput");
    var n = document.getElementById("changePortBtn");

    function o(e) {
        return "" === e || /^\d{1,5}$/.test(e) && 1025 <= e && e <= 65535
    }
    t.addEventListener("input", function() {
        5 < this.value.length && (this.value = this.value.slice(0, 5))
    }),
    e.addEventListener("change", function() {
        var e = t.value.trim();
        this.checked && !o(e) && (alert("❌ Neplatný port! Zadejte port mezi 1024 a 65535."), this.checked = !1)
    }),
    n.addEventListener("click", function() {
        var e = t.value.trim();
        o(e) ? alert("✅ Port změněn na: " + (e || "5555")) : alert("❌ Neplatný port! Zadejte port mezi 1024 a 65535.")
    })
}),

document.getElementById("usbDebugToggle").addEventListener("change", e => {
    toggleUsbDebug(e.target.checked)
}),

document.getElementById("wirelessToggle").addEventListener("change", e => {
    toggleWirelessAdb(e.target.checked)
}),

document.getElementById("bootToggle").addEventListener("change", e => {
    toggleBoot(e.target.checked)
}),

document.getElementById("changePortBtn").addEventListener("click", async () => {
    var e = document.getElementById("wirelessToggle").checked,
        t = document.getElementById("bootToggle").checked;
    e && await toggleWirelessAdb(!0),
    t && await toggleBoot(!0)
}),

window.onload = () => {
    setTheme(currentThemeIndex),
    initializeEnvironment(),
    document.getElementById("notificationToggle").checked = showNotifications
},

document.getElementById("notificationToggle").addEventListener("change", e => {
    showNotifications = e.target.checked,
    localStorage.setItem("showNotifications", showNotifications)
}),

setInterval(() => {
    updateStatus(),
    updateConnectionInfo()
}, 2e3);
